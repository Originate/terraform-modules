locals {
  x01 = { this = { for k, v in var.in : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }, next = merge([for ki, vi in var.in : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x02 = { this = merge(local.x01.this, { for k, v in local.x01.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x01.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x03 = { this = merge(local.x02.this, { for k, v in local.x02.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x02.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x04 = { this = merge(local.x03.this, { for k, v in local.x03.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x03.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x05 = { this = merge(local.x04.this, { for k, v in local.x04.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x04.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x06 = { this = merge(local.x05.this, { for k, v in local.x05.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x05.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x07 = { this = merge(local.x06.this, { for k, v in local.x06.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x06.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x08 = { this = merge(local.x07.this, { for k, v in local.x07.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x07.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x09 = { this = merge(local.x08.this, { for k, v in local.x08.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x08.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x10 = { this = merge(local.x09.this, { for k, v in local.x09.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x09.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x11 = { this = merge(local.x10.this, { for k, v in local.x10.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x10.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x12 = { this = merge(local.x11.this, { for k, v in local.x11.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x11.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x13 = { this = merge(local.x12.this, { for k, v in local.x12.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x12.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x14 = { this = merge(local.x13.this, { for k, v in local.x13.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x13.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x15 = { this = merge(local.x14.this, { for k, v in local.x14.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x14.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x16 = { this = merge(local.x15.this, { for k, v in local.x15.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x15.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x17 = { this = merge(local.x16.this, { for k, v in local.x16.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x16.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x18 = { this = merge(local.x17.this, { for k, v in local.x17.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x17.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x19 = { this = merge(local.x18.this, { for k, v in local.x18.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x18.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }
  x20 = { this = merge(local.x19.this, { for k, v in local.x19.next : k => v if can(tobool(v)) || can(tolist(v)) || can(tonumber(v)) || can(tostring(v)) }), next = merge([for ki, vi in local.x19.next : { for kj, vj in vi : join(var.separator, [ki, kj]) => vj } if !can(tobool(vi)) && !can(tolist(vi)) && !can(tonumber(vi)) && !can(tostring(vi))]...) }

  last = local.x20
}
